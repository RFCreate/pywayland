from typing import Any

from .ffi import (
    CData,
    CharCData,
    DispatcherFuncT,
    EventLoopFdFuncT,
    EventLoopIdleFuncT,
    EventLoopSignalFuncT,
    EventLoopTimerFuncT,
    GlobalBindFuncT,
    NotifyFuncT,
    ResourceDestroyFuncT,
    WlArgumentCData,
    WlClientCData,
    WlDisplayCData,
    WlEventLoopCData,
    WlEventSourceCData,
    WlGlobalCData,
    WlInterfaceCData,
    WlListCData,
    WlListenerCData,
    WlProxyCData,
    WlQueueCData,
    WlResourceCData,
    WlSignalCData,
)

WAYLAND_VERSION_MAJOR: int
WAYLAND_VERSION_MINOR: int
WAYLAND_VERSION_MICRO: int

dispatcher_func: DispatcherFuncT
resource_destroy_func: ResourceDestroyFuncT
event_loop_fd_func: EventLoopFdFuncT
event_loop_signal_func: EventLoopSignalFuncT
event_loop_timer_func: EventLoopTimerFuncT
event_loop_idle_func: EventLoopIdleFuncT
global_bind_func: GlobalBindFuncT
notify_func: NotifyFuncT

# Display functionality
def wl_display_create() -> WlDisplayCData: ...
def wl_display_destroy(display: WlDisplayCData) -> None: ...
def wl_display_destroy_clients(display: WlDisplayCData) -> None: ...
def wl_display_flush_clients(display: WlDisplayCData) -> None: ...
def wl_display_get_event_loop(display: WlDisplayCData) -> WlEventLoopCData: ...
def wl_display_add_socket(display: WlDisplayCData, name: bytes) -> int: ...
def wl_display_add_socket_auto(display: WlDisplayCData) -> CharCData: ...
def wl_display_terminate(display: WlDisplayCData) -> None: ...
def wl_display_run(display: WlDisplayCData) -> None: ...
def wl_display_get_serial(display: WlDisplayCData) -> int: ...
def wl_display_next_serial(display: WlDisplayCData) -> int: ...
def wl_display_init_shm(display: WlDisplayCData) -> int: ...
def wl_display_add_shm_format(display: WlDisplayCData, format: int) -> int: ...
def wl_event_queue_destroy(queue: WlQueueCData) -> None: ...
def wl_display_connect(name: bytes | CharCData) -> WlDisplayCData: ...
def wl_display_connect_to_fd(fd: int) -> WlDisplayCData: ...
def wl_display_disconnect(display: WlDisplayCData) -> None: ...
def wl_display_get_fd(display: WlDisplayCData) -> int: ...
def wl_display_dispatch(display: WlDisplayCData) -> int: ...
def wl_display_dispatch_pending(display: WlDisplayCData) -> int: ...
def wl_display_dispatch_queue(display: WlDisplayCData, queue: WlQueueCData) -> int: ...
def wl_display_dispatch_queue_pending(
    display: WlDisplayCData, queue: WlQueueCData
) -> int: ...
def wl_display_roundtrip(display: WlDisplayCData) -> int: ...
def wl_display_roundtrip_queue(display: WlDisplayCData, queue: WlQueueCData) -> int: ...
def wl_display_get_error(display: WlDisplayCData) -> int: ...
def wl_display_read_events(display: WlDisplayCData) -> int: ...
def wl_display_prepare_read(display: WlDisplayCData) -> int: ...
def wl_display_prepare_read_queue(
    display: WlDisplayCData, queue: WlQueueCData
) -> int: ...
def wl_display_flush(display: WlDisplayCData) -> int: ...
def wl_display_create_queue(display: WlDisplayCData) -> WlQueueCData: ...

# Fixed_t handling
def wl_fixed_to_double(f: int) -> float: ...
def wl_fixed_from_double(d: float) -> int: ...
def wl_fixed_from_int(i: int) -> int: ...

# Client functionality
def wl_client_create(display: WlDisplayCData, fd: int) -> WlClientCData: ...
def wl_client_destroy(client: WlClientCData) -> None: ...
def wl_client_flush(client: WlClientCData) -> None: ...
def wl_client_add_destroy_listener(
    client: WlClientCData, listener: WlListenerCData
) -> None: ...
def wl_client_get_object(client: WlClientCData, id: int) -> WlResourceCData: ...
def wl_client_get_credentials(
    client: WlClientCData, pid: CData, uid: CData, gid: CData
) -> None: ...
def os_create_anonymous_file(size: int) -> int: ...

# List functionality
def wl_list_init(list: WlListCData) -> None: ...
def wl_list_insert(list: WlListCData, elm: WlListCData) -> None: ...
def wl_list_remove(list: WlListCData) -> None: ...
def wl_list_length(list: WlListCData) -> int: ...
def wl_list_empty(list: WlListCData) -> int: ...
def wl_list_insert_list(list: WlListCData, other: WlListCData) -> None: ...

# Proxy functionality
def wl_proxy_marshal_array(
    proxy: WlProxyCData, opcode: int, args_ptr: WlArgumentCData
) -> None: ...
def wl_proxy_marshal_array_constructor(
    proxy: WlProxyCData,
    opcode: int,
    args_ptr: WlArgumentCData,
    interface_ptr: WlInterfaceCData,
) -> Any: ...
def wl_proxy_destroy(proxy: WlProxyCData) -> None: ...
def wl_proxy_add_dispatcher(
    proxy: WlProxyCData,
    dispatcher_func: DispatcherFuncT,
    dispatcher_data: CData,
    data: CData,
) -> int: ...

# Resource functionality
def wl_resource_post_event_array(
    resource: WlResourceCData, opcode: int, args: WlArgumentCData
) -> None: ...
def wl_resource_post_error(
    resource: WlResourceCData, code: int, msg: bytes, *args: str
) -> None: ...
def wl_resource_create(
    client: WlClientCData, interface: WlInterfaceCData, version: int, id: int
) -> WlResourceCData: ...
def wl_resource_set_dispatcher(
    resource: WlResourceCData,
    dispatcher_func: DispatcherFuncT,
    implementation: CData,
    data: CData,
    resource_destroy_func: ResourceDestroyFuncT,
) -> None: ...
def wl_resource_destroy(resource: WlResourceCData) -> None: ...
def wl_resource_get_id(resource: WlResourceCData) -> int: ...
def wl_resource_get_user_data(resource: WlResourceCData) -> CData: ...
def wl_resource_get_version(resource: WlResourceCData) -> int: ...
def wl_resource_get_client(resource: WlResourceCData) -> WlClientCData: ...
def wl_resource_add_destroy_listener(
    resource: WlResourceCData, listener: WlListenerCData
) -> None: ...
def wl_signal_init(ptr: WlSignalCData) -> None: ...
def wl_signal_add(ptr: WlSignalCData, listener: WlListenerCData) -> None: ...
def wl_signal_emit(ptr: WlSignalCData, data: CData) -> None: ...

# Global functionality
def wl_global_create(
    display: WlDisplayCData,
    interface: WlInterfaceCData,
    version: int,
    data: CData,
    global_bind_func: GlobalBindFuncT,
) -> WlGlobalCData: ...
def wl_global_destroy(data: WlGlobalCData) -> None: ...

# Eventloop functionality
def wl_event_loop_add_destroy_listener(
    ptr: WlEventLoopCData, listener: WlListenerCData
) -> None: ...
def wl_event_loop_create() -> WlEventLoopCData: ...
def wl_event_loop_destroy(event_loop: WlEventLoopCData) -> None: ...
def wl_event_loop_add_fd(
    ptr: WlEventLoopCData,
    fd: int,
    mask: int,
    event_loop_fd_func: EventLoopFdFuncT,
    data: CData,
) -> WlEventSourceCData: ...
def wl_event_source_fd_update(ptr: WlEventSourceCData, mask: int) -> int: ...
def wl_event_loop_add_timer(
    ptr: WlEventLoopCData,
    event_loop_timer_func: EventLoopTimerFuncT,
    data: CData,
) -> WlEventSourceCData: ...
def wl_event_loop_add_signal(
    ptr: WlEventLoopCData,
    signal: int,
    event_loop_signal_func: EventLoopSignalFuncT,
    data: CData,
) -> WlEventSourceCData: ...
def wl_event_loop_dispatch(ptr: WlEventLoopCData, timeout: int) -> int: ...
def wl_event_loop_dispatch_idle(ptr: WlEventLoopCData) -> None: ...
def wl_event_loop_add_idle(
    ptr: WlEventLoopCData,
    event_loop_idle_func: EventLoopIdleFuncT,
    data: CData,
) -> WlEventSourceCData: ...
def wl_event_loop_get_fd(ptr: WlEventLoopCData) -> int: ...

# Eventsource functionality
def wl_event_source_timer_update(ptr: WlEventSourceCData, ms_delay: int) -> None: ...
def wl_event_source_remove(ptr: WlEventSourceCData) -> None: ...
def wl_event_source_check(ptr: WlEventSourceCData) -> None: ...

WL_EVENT_READABLE: int
WL_EVENT_WRITABLE: int
WL_EVENT_HANGUP: int
WL_EVENT_ERROR: int
