from typing import overload, Any, Callable, TypeVar, Union

class CData:
    def __getitem__(self, idx: int): ...
    # required for wl_list_for_each
    @property
    def next(self) -> CData: ...

class CDataArray:
    def __setitem__(self, idx: int, elem: CData) -> None: ...

# built-in cdata types
class NullCData(CData): ...
class CharCData(CData): ...

# custom cdata types
class ClientCData(CData): ...
class DisplayCData(CData): ...
class EventLoopCData(CData): ...
class ListenerCData(CData): ...
class QueueCData(CData): ...
class ResourceCData(CData): ...

_FuncType = Callable[..., Any]
_F = TypeVar("_F", bound=_FuncType)
_CDataT = TypeVar("_CDataT", bound=CData)

class ffi:
    NULL: NullCData
    @overload
    @staticmethod
    def new(cdecl: str) -> CData: ...
    @overload
    @staticmethod
    def new(cdecl: str, init: Any) -> CDataArray: ...
    @staticmethod
    def gc(
        cdata: _CDataT, destructor: Callable[[_CDataT], None], size: int = 0
    ) -> _CDataT: ...
    @staticmethod
    def string(cdata: CharCData) -> str: ...
    @staticmethod
    def release(cdata: CData) -> None: ...
    @staticmethod
    def def_extern() -> Callable[[_F], _F]: ...
    @staticmethod
    def from_handle(cdata: CData) -> Any: ...

class lib:
    WAYLAND_VERSION_MAJOR: int
    WAYLAND_VERSION_MINOR: int
    WAYLAND_VERSION_MICRO: int
    # Event loop functionality
    @staticmethod
    def wl_event_loop_create() -> EventLoopCData: ...
    @staticmethod
    def wl_event_loop_destroy(event_loop: EventLoopCData) -> None: ...
    # Display functionality
    @staticmethod
    def wl_display_create() -> DisplayCData: ...
    @staticmethod
    def wl_display_destroy(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_destroy_clients(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_flush_clients(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_get_event_loop(display: DisplayCData) -> EventLoopCData: ...
    @staticmethod
    def wl_display_add_socket(display: DisplayCData, name: bytes) -> int: ...
    @staticmethod
    def wl_display_add_socket_auto(display: DisplayCData) -> CharCData: ...
    @staticmethod
    def wl_display_terminate(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_run(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_get_serial(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_next_serial(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_init_shm(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_add_shm_format(display: DisplayCData, format: int) -> int: ...
    @staticmethod
    def wl_event_queue_destroy(queue: QueueCData) -> None: ...
    @staticmethod
    def wl_display_connect(name: Union[bytes, NullCData]) -> DisplayCData: ...
    @staticmethod
    def wl_display_connect_to_fd(fd: int) -> DisplayCData: ...
    @staticmethod
    def wl_display_disconnect(display: DisplayCData) -> None: ...
    @staticmethod
    def wl_display_get_fd(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_dispatch(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_dispatch_pending(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_dispatch_queue(display: DisplayCData, queue: QueueCData) -> int: ...
    @staticmethod
    def wl_display_dispatch_queue_pending(
        display: DisplayCData, queue: QueueCData
    ) -> int: ...
    @staticmethod
    def wl_display_roundtrip(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_roundtrip_queue(display: DisplayCData, queue: QueueCData) -> int: ...
    @staticmethod
    def wl_display_get_error(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_read_events(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_prepare_read(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_prepare_read_queue(
        display: DisplayCData, queue: QueueCData
    ) -> int: ...
    @staticmethod
    def wl_display_flush(display: DisplayCData) -> int: ...
    @staticmethod
    def wl_display_create_queue(display: DisplayCData) -> QueueCData: ...
    @staticmethod
    def wl_client_create(display: DisplayCData, fd: int) -> ClientCData: ...
    @staticmethod
    def wl_client_destroy(client: ClientCData) -> None: ...
    @staticmethod
    def wl_client_flush(client: ClientCData) -> None: ...
    @staticmethod
    def wl_client_add_destroy_listener(
        client: ClientCData, listener: ListenerCData
    ) -> None: ...
    @staticmethod
    def wl_client_get_object(client: ClientCData, id: int) -> ResourceCData: ...
    @staticmethod
    def wl_resource_get_user_data(resource: ResourceCData) -> CData: ...
    @staticmethod
    def wl_client_get_credentials(
        client: ClientCData, pid: CData, uid: CData, gid: CData
    ) -> None: ...
    WL_EVENT_READABLE: int
    WL_EVENT_WRITABLE: int
    WL_EVENT_HANGUP: int
    WL_EVENT_ERROR: int
